trigger: none
pr: none

pool: 
  name: 'NetCorePublic-Pool'

steps:
# Start by restoring all the dependencies. This needs to be its own task
# from what I can tell. We specifically only target DurableTask.AzureStorage
# and its direct dependencies.
- task: DotNetCoreCLI@2
  displayName: 'Restore nuget dependencies'
  inputs:
    command: restore
    verbosityRestore: Minimal
    projects: 'DurableTask.sln'

# Build the filtered solution in release mode, specifying the continuous integration flag.
- task: VSBuild@1
  displayName: 'Build'
  inputs:
    solution: 'DurableTask.sln'
    vsVersion: 'latest'
    logFileVerbosity: minimal
    configuration: Release
    msbuildArgs: /p:GITHUB_RUN_NUMBER=$(Build.BuildId) /p:ContinuousIntegrationBuild=true

# Packaging needs to be a separate step from build.
# This will automatically pick up the signed DLLs.
- task: DotNetCoreCLI@2
  displayName: Generate nuget packages
  inputs:
    command: pack
    verbosityPack: Minimal
    configuration: Release
    nobuild: true
    packDirectory: $(build.artifactStagingDirectory)
    packagesToPack: 'DurableTask.sln'

# Push non test NuGet packages from a build to internal organization Feed
- task: DotNetCoreCLI@2
  inputs:
    command: 'push'
    searchPatternPush: '$(build.ArtifactStagingDirectory)/*.nupkg;!$(Build.ArtifactStagingDirectory)/*.Tests.nupkg'
    feedPublish: 'dotnet-eng'

# Make the nuget packages available for download in the ADO portal UI
- publish: $(build.artifactStagingDirectory)
  displayName: 'Publish nuget packages to Artifacts'
  artifact: PackageOutput